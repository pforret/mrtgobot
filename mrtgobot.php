<?php
include_once("lib/settings.inc");
include_once("lib/class_mrtgobot.inc");
include_once("lib/class_ostools.inc");
$shortopts=Array(
	"v"	=> "verbose",
	"b"	=> "background (run/index all CFGs simultaneously)",
	"c"	=> "add config info (for PROBE)",
	"f" => "force (e.g. overwrite config files)",
	"s" => "silent (show no output)",
	"?"	=> "help (show usage)",
	);
	
$actions=Array(
	"cron",
	"crontab",
	"get",
	"help",
	"index",
	"new",
	"probe",
	"rsync",
	"run",
	"setup",
	"usage",
	);
$prog=str_replace(".php",".sh",realpath($argv[0]));
$optlist=implode("",array_keys($shortopts));
$options = getopt($optlist);
if(isset($options["v"]))	$debug=true;
$raw=$argv;
array_shift($raw); // remove program name itself
$endofopts=false;
while(!$endofopts AND $raw){
	$vals=array_values($raw);
	$val1=$vals[0];
	if(substr($val1,0,1)=="-"){
		// is an option
		$key=substr($val1,1,1);
		if(isset($shortopts["$key:"])){
			array_shift($raw);
			array_shift($raw);
			continue;
		}
		array_shift($raw);
	} else {
		$endofopts=true;
	}
}
trace("Command line:");
trace($argv);
trace("Options detected:");
trace($options);
trace("Parameters that are not options:");
trace($raw);

if(isset($raw[0])){
	$action=strtolower($raw[0]);
} else {
	$action="help";
}
if(isset($options["?"]))	$action="help";
if(!in_array($action,$actions)){
	warning("mrtgobot","[$action] is not an accepted action");
	warning("mrtgobot","Accepted actions (" . implode(",",$actions) . ")",true);
}
$mg=New Mrtgobot;
switch($action){
case "help":
case "usage":
	show_usage();
	exit(0);
	break;;
	
case "setup":
	if(!isset($raw[1]) OR !isset($raw[2])){
		warning($action,"need [cfgfolder] and [htmlfolder] as parameters",true);
	}
	$mg->init_ini($raw[1],$raw[2]);
	break;;
	
case "new":
	// create new .cfg file
	if(!isset($raw[1])){
		warning($action,"need [cfgname] [title] as parameters",true);
	}
	if(!isset($raw[2])){
		$raw[2]="";
	}
	$mg->new_cfg($raw[1],$raw[2]);
	break;;
	
case "index":
	// for each .cfg file, create an index page
	if(!isset($raw[1])){
		warning($action,"need [folder|file.cfg] as parameter",true);
	}
	$profile=$raw[1];
	if(!file_exists($profile)){
		warning($action,"profile [$profile] cannot be found",true);
	}
	$mg->indexmaker($profile);
	break;;
	
case "run":
	// for each .cfg file, decide if it has to run and run it
	if(!isset($raw[1])){
		warning($action,"need [folder|file.cfg] as parameter",true);
	}
	$profile=$raw[1];
	if(!file_exists($profile)){
		warning($action,"profile [$profile] cannot be found",true);
	}
	$mg->runcfg($profile);
	break;;
	
case "crontab":
	if(!isset($raw[1])){
		warning($action,"need [folder|file.cfg] as parameter",true);
	}
	// give line(s) that should be in crontab
	// RUN every 5 minutes
	// INDEX every day
	// RSYNC every hour
	$prog=realpath($argv[0]);
	$date=date("c");
	$profile=$raw[1];
	$lines[]="### Generated by $prog on $date";
	$lines[]="### add to /etc/crontab or by executing crontab -e";
	$lines[]="### Remark: some systems (eg NAS) use a slightly different crontab format";
	$lines[]="###         change [$prog] by [root	$prog]";
	$lines[]="# run the data collection every 5 minutes";
	$lines[]="0-59/5	*	*	*	*	$prog run   $profile";
	$lines[]="# re-generate the indexes every morning";
	$lines[]="2	7	*	*	*	$prog index $profile";
	$lines[]="# copy output to external web server every hour";
	$lines[]="3	*	*	*	*	$prog rsync $profile  user@server:/path";
	$lines[]="";
	echo implode("\r\n",$lines);
	break;;
	
case "rsync":
	trace("run [rsync]");
	if(!isset($raw[1])){
		warning($action,"need [config folder] [user@host:/path] as parameters",true);
	}
	$profile=$raw[1];
	$path=$raw[2];
	$mg->run_rsync($profile,$path);
	break;;
	
case "probe":
	trace("run [probe]");
	if(!isset($raw[1])){
		warning($action,"need [type] [params] as parameters",true);
	}
	$type=strtolower($raw[1]);
	array_shift($raw);
	$withconfig=isset($options["c"]);
	switch($type){
	case "test":
		$s=New Sensor("test");
		$params=$s->params;
		$params["value1"]=100;
		$params["value2"]=0;
		$params["name1"]="always100";
		$params["name2"]="always0";
		$params["mrtg_maxbytes"]=100;
		$params["cmdline"]="`$prog $action $type " . implode(" ",$raw) . "`";
		$params["config"]="$prog -c $action $type";
		$params["title"]="Probe Test";
		$params["mrtg_unit"]="units";
		$params["mrtg_options"]="gauge,nopercent,nolegend";
		break;;
	case "cpu":
		$s=New Sensor("cpu");
		$params=$s->cpuusage(true);
		break;;
	case "mem":
		$s=New Sensor("mem");
		$params=$s->memusage(true);
		break;;
	case "disk":
		$s=New Sensor("disk");
		$params=$s->diskusage($raw[1]);
		break;;
	case "ping":
		$s=New Sensor("ping");
		if(isset($raw[2])){
			$params=$s->pingtime($raw[1],$raw[2]);	
		} else {
			$params=$s->pingtime($raw[1]);	
		}
		break;;
	case "uptime":
		$s=New Sensor("uptime");
		$upsecs=(int)file_get_contents("/proc/uptime");
		$uphours=round($upsecs/3600);
		$params["description"]=gethostname() . ": reboots in last 24 hours";
		$params["value1"]=min($uphours,24);
		$params["name1"]="hours since reboot";
                $params["value2"]=24-$params["value1"];
                $params["name2"]="reboot time";
		$params["server"]=gethostname();
		$params["mrtg_maxbytes"]=100;
		$params["config"]="$prog -c $action $type";
		$params["title"]="Probe Test";
		$params["mrtg_unit"]="hours";
		$params["mrtg_options"]="gauge,nopercent,nolegend";
		break;;
	default:
		$s=New Sensor("error");
		$params["value1"]="probe [$type] not yet supported";
		$params["value2"]="probe [$type] not yet supported";
	}
	if($raw){
		$params["cmdline"]="`$prog $action " . implode(" ",$raw) . "`";
	} else {
		$params["cmdline"]="`$prog $action $type`";
	}
	$params["config"]="$prog -c $action $type";
	$s->mrtg_output($params,$withconfig);
	
	break;;
	
default:
	warning("mrtgobot","unknown action [$action]",true);
}

function show_usage(){
	global $argv;
	
	$prog=basename($argv[0]);
	echo "
====================================
===== MRTGoBot [ACTION] [PARAMS]
===== Author: Peter Forret <peter@forret.com>
===== (c) 2015-2018

$prog setup [folder]
	create base mrtg config and html folders
	
$prog new [name]
	create new mrtg config for a new server/topic
	
$prog index [target]
	create index html for this/all config
	
$prog run   [target]
	run this/all config .cfg 
	
$prog crontab [target]
	copy all html files via rsync
	
$prog rsync [target]
	copy all html files via rsync
	
$prog probe [sensor] [options]
	purpose: probe values of local system: cpu, mem, network, disk, folder size, ...
	[sensor] can be [cpu|load|mem|disk|foldersize|filesize|network], result is mrtg ready
	example: target[xyz]=`mrtgobot probe cpu`
	
$prog get   [options] [url]
	wrapper around http get: caching, error checking, timeout, ...
	
====================================
";
}
?>
